<launch>
    
	<!-- set some ros tools -->
	<arg name="use_pantilt" default="false"/>

	<arg name="load_moveit" default="false"/>

	<arg name="robot_name" default="platform_robot"/>
	<arg name="robot_urdf_file" default="$(find platform_gazebo)/robot/$(arg robot_name).urdf.xacro"/>
	 
	<arg name="controllers" default="kuka_group_command_controller_fri " />
	<arg name="active_controllers" default="operational_space_controller" />
	
	
	<arg name="use_left_arm" default="true"/>
	<arg name="use_right_arm" default="true"/>

	<!-- load robotHW configurations to rosparam server -->
	<rosparam command="load" file="$(find double_lwr_robot)/config/double_hw_interface.yaml"/>

	<!-- load all kuka controller configurations to rosparam server -->
	<rosparam file="$(find double_lwr_robot)/config/double_controllers.yaml" command="load"/>
	
	<param name="robot_description" command="$(find xacro)/xacro $(arg robot_urdf_file) use_pantilt:=$(arg use_pantilt)"/>
	<param name="kuka_lwr_left/robot_description" command="$(find xacro)/xacro '$(find double_lwr_robot)/robot/kuka_lwr_left_robot.urdf.xacro'" />
	<param name="kuka_lwr_right/robot_description" command="$(find xacro)/xacro '$(find double_lwr_robot)/robot/kuka_lwr_right_robot.urdf.xacro'" />


	<arg name="paused" default="false"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="gui" default="true"/>
	<arg name="headless" default="false"/>
	<arg name="debug" default="false"/>

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find kuka_lwr_gazebo)/worlds/simple_environment.world"/>
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="$(arg paused)"/>
		<arg name="use_sim_time" value="$(arg use_sim_time)"/>
		<arg name="headless" value="$(arg headless)"/>
	</include>

	<node name="spawn_trunk_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)" respawn="false" output="screen" />


	<group if="$(arg use_left_arm)">
		<!-- namespace of left arm -->
		<group ns="kuka_lwr_left">
		    <group if="$(arg load_moveit)">	
				<node name="controller_spawner_joint_left" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller joint_trajectory_controller"/>
			</group>
			<group unless="$(arg load_moveit)">	
				<node name="controller_spawner_joint_left" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller"/>
			</group>
			
			<node name="controller_spawner_left" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="$(arg controllers)"/>
			<!-- <node name="controller_spawner_active_left" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="$(arg active_controllers)"/> -->
			
		</group>
	
		<group ns="kuka_lwr_left">
			<node name="robot_state_publisher_left" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
			<node name="joint_state_publisher_left" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen"/>
		</group>
	</group>


	<group if="$(arg use_right_arm)">
		<!-- namespace of right arm -->
		<group ns="kuka_lwr_right">
			<group if="$(arg load_moveit)">	
				<node name="controller_spawner_joint_right" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller joint_trajectory_controller"/>
			</group>
			<group unless="$(arg load_moveit)">	
				<node name="controller_spawner_joint_right" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller"/>
			</group>
			
			
			<node name="controller_spawner_right" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="$(arg controllers)"/>
		</group>

		<group ns="kuka_lwr_right">
			<node name="robot_state_publisher_right" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
			<node name="joint_state_publisher_right" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen"/>
		</group>
	</group>


	<group if="$(arg use_pantilt)">
		<!-- pantilt needs ***************************************************************************************************************************************  -->
		<!-- pantilt controllers -->
		<arg name="pantilt_controllers" default="pantilt_group_position_controller" />

		<param name="pantilt/robot_description" command="$(find xacro)/xacro.py '$(find pantilt_gazebo)/robot/pantilt_gazebo.urdf.xacro'" />

		<!-- load robotHW pantilt configurations to rosparam server -->
		<rosparam command="load" file="$(find pantilt_gazebo)/config/pantilt_hw_interface.yaml"/>

		<!-- load all pantitlt controller configurations to rosparam server -->
		<rosparam file="$(find pantilt_gazebo)/config/pantilt_control.yaml" command="load"/>

		<!-- namespace pantilt -->
		<group ns="pantilt">
			<!-- spawn only desired controllers in current namespace -->
			<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller $(arg pantilt_controllers)"/>
		</group>

		<node name="robot_state_publisher_pantilt" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
				<remap from="/joint_states" to="/pantilt/joint_states" />
		</node>
		<!-- ***************************************************************************************************************************************************  -->
	</group>


	<!-- load moveit configuration -->
	<group if="$(arg load_moveit)">	
	
	    <group if="$(arg use_left_arm)">
			<group ns="kuka_lwr_left">
				<include file="$(find kuka_lwr_moveit)/launch/move_group.launch">
					<arg name="allow_trajectory_execution" value="true"/>  
					<arg name="fake_execution" value="false"/>
					<arg name="info" value="true"/>
					<arg name="debug" value="false"/>
					<remap from="/joint_states" to="/kuka_lwr_left/joint_states" />
				</include>
				<!-- The semantic description that corresponds to the URDF -->
				<param name="robot_description_semantic" textfile="$(find kuka_lwr_moveit)/config/kuka_lwr_left.srdf" />
			</group>
		</group>
		
		<group if="$(arg use_right_arm)">
			<group ns="kuka_lwr_right">
				<include file="$(find kuka_lwr_moveit)/launch/move_group.launch">
					<arg name="allow_trajectory_execution" value="true"/>  
					<arg name="fake_execution" value="false"/>
					<arg name="info" value="true"/>
					<arg name="debug" value="false"/>
					<remap from="/joint_states" to="/kuka_lwr_right/joint_states" />
				</include>
				<!-- The semantic description that corresponds to the URDF -->
				<param name="robot_description_semantic" textfile="$(find kuka_lwr_moveit)/config/kuka_lwr_right.srdf" />
			</group>
		</group>

	</group>
	
</launch>
