<launch>
	<!-- LAUNCH INTERFACE FOR REAL ARMS ROBOTS -->
	
	<!-- set the parameters for the real interface -->
	<!--	
			49938 = right arm
			IP du bras droit : 192.168.100.253
			
			49939 = left arm
			IP du bras gauche : 192.168.100.254
	-->
    
	<arg name="robot_name" default="double_lwr_robot"/>
	<arg name="robot_urdf_file" default="$(find double_lwr_robot)/robot/$(arg robot_name).urdf.xacro"/>

	<param name="fri_driver_file_left" type="str" value="$(find double_lwr_robot)/config/49939-FRI-Driver.init"/>
	<param name="fri_driver_file_right" type="str" value="$(find double_lwr_robot)/config/49938-FRI-Driver.init"/>

	<arg name="controllers" default="kuka_group_command_controller_fri kuka_gravity_compensation_controller torque_based_position_controller torque_based_position_controller_gazebo kuka_one_task_inverse_kinematics cartesian_velocity_control cartesian_computed_torque_controller kuka_simple_cartesian_impedance_controller operational_space_controller harsh_cartesian_impedance_controller harsh_admittance_controller harsh_trust_impedance_controller kuka_one_task_inverse_kinematics_fri harsh_admittance_controller_fri harsh_admittance_controller_ros" />
	
	<arg name="use_rviz" default="false"/>

	<arg name="use_left_arm" default="true"/>
	<arg name="use_right_arm" default="true"/>

	<!-- load robotHW configurations to rosparam server -->
	<rosparam command="load" file="$(find double_lwr_robot)/config/double_hw_interface.yaml"/>

	<!-- load all kuka controller configurations to rosparam server -->
	<rosparam file="$(find double_lwr_robot)/config/double_controllers.yaml" command="load"/>
	
	<param name="robot_description" command="$(find xacro)/xacro.py $(arg robot_urdf_file)"/>
	<param name="kuka_lwr_left/robot_description" command="$(find xacro)/xacro.py '$(find double_lwr_robot)/robot/kuka_lwr_left_robot.urdf.xacro'" />
	<param name="kuka_lwr_right/robot_description" command="$(find xacro)/xacro.py '$(find double_lwr_robot)/robot/kuka_lwr_right_robot.urdf.xacro'" />


	<group if="$(arg use_left_arm)">
		<!-- namespace of left arm -->
		<group ns="kuka_lwr_left">
			<node name="controller_spawner_joint_left" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller"/>
			<node name="controller_spawner_left" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="--stopped $(arg controllers)"/>
			<node name="lwr_hw_fril_left" pkg="kuka_lwr_hw" type="lwr_hw_fril_node" output="screen"/>
		</group>
	
		<group ns="kuka_lwr_left">
			<node name="robot_state_publisher_left" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
			<node name="joint_state_publisher_left" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen"/>
		</group>
	</group>


	<group if="$(arg use_right_arm)">
		<!-- namespace of right arm -->
		<group ns="kuka_lwr_right">
			<node name="controller_spawner_joint_right" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="joint_state_controller"/>
			<node name="controller_spawner_right" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="--stopped $(arg controllers)"/>
			<node name="lwr_hw_fril_right" pkg="kuka_lwr_hw" type="lwr_hw_fril_node" output="screen"/>
		</group>

		<group ns="kuka_lwr_right">
			<node name="robot_state_publisher_right" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
			<node name="joint_state_publisher_right" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen"/>
		</group>
	</group>

	<group if="$(arg use_rviz)">
		<node name="kuka_lwr_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find double_lwr_robot)/config/config.rviz" output="screen"/>
	</group>
	
</launch>
